basePath: /api/v1
definitions:
  auth.AuthResponse:
    description: Authentication response with token and user data
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/auth.User'
    type: object
  auth.LoginRequest:
    description: User login request data
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: secret123
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    description: User registration request data
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: John Doe
        minLength: 2
        type: string
      password:
        example: secret123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  auth.User:
    description: User account information
    properties:
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      name:
        example: John Doe
        type: string
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  response.ErrorResponse:
    properties:
      code:
        example: AUTH_INVALID_TOKEN
        type: string
      error:
        example: Invalid token
        type: string
    type: object
  todos.CreateTodoRequest:
    description: Data required to create a new todo
    properties:
      description:
        example: Get milk, bread, and eggs
        type: string
      dueDate:
        example: "2023-12-31T23:59:59Z"
        type: string
      priority:
        enum:
        - low
        - medium
        - high
        example: medium
        type: string
      tags:
        example:
        - groceries
        - home
        items:
          type: string
        type: array
      title:
        example: Buy groceries
        minLength: 3
        type: string
    required:
    - title
    type: object
  todos.UpdateTodoRequest:
    description: Data for updating an existing todo
    properties:
      completed:
        example: true
        type: boolean
      description:
        example: Get milk, bread, and eggs
        type: string
      dueDate:
        example: "2023-12-31T23:59:59Z"
        type: string
      priority:
        enum:
        - low
        - medium
        - high
        example: high
        type: string
      tags:
        example:
        - groceries
        - home
        - urgent
        items:
          type: string
        type: array
      title:
        example: Buy groceries
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A RESTful API for managing todos with JWT authentication
  title: GoTodo API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, and name
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /todos/:
    get:
      consumes:
      - application/json
      description: Get a list of todos for the authenticated user with optional filtering
      parameters:
      - description: Filter by completion status
        in: query
        name: completed
        type: boolean
      - description: 'Maximum number of todos to return (default: 50, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create a new todo for the authenticated user
      parameters:
      - description: Todo creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/todos.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new todo
      tags:
      - todos
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a todo for the authenticated user
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: Get a specific todo by ID for the authenticated user
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a todo by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update an existing todo for the authenticated user
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      - description: Todo update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/todos.UpdateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a todo
      tags:
      - todos
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer <token>"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
